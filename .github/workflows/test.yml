name: Tests

# Optimized CI/CD strategy:
# 1. Fast tests (library + core unit tests) run first for immediate feedback (~3-5 minutes)
# 2. Comprehensive tests (40+ second failure scenarios) run conditionally for thorough validation
# 3. Coverage generation focuses on fast tests to maintain CI speed

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main, develop, master ]

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0  # Disable incremental compilation for CI
  CARGO_PROFILE_DEV_DEBUG: 0  # Reduce debug info size
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
        include:
          - rust: stable
            can_fail: false
          - rust: beta  
            can_fail: false
          - rust: nightly
            can_fail: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust Environment
      uses: ./.github/actions/setup-rust
      with:
        rust-version: ${{ matrix.rust }}
        components: rustfmt,clippy
        cache-suffix: test

    - name: Check formatting
      run: cargo fmt --all -- --check
      continue-on-error: ${{ matrix.can_fail }}

    - name: Run clippy
      run: cargo clippy --all-targets --all-features
      continue-on-error: ${{ matrix.can_fail }}

    - name: Build
      run: cargo build --verbose
      continue-on-error: ${{ matrix.can_fail }}

    - name: Run fast unit tests (library + core functionality)
      run: |
        # Run library tests first for immediate feedback (11 seconds)
        echo "üöÄ Running library tests for fast feedback..."
        cargo test --lib --quiet
        echo "‚úÖ Library tests completed successfully"
        
        # Run fast unit tests (excludes comprehensive/long-running tests)  
        echo "üß™ Running fast unit tests (excludes comprehensive scenarios)..."
        cargo test --tests --verbose -- --skip integration:: --skip performance:: --skip comprehensive
      env:
        SKIP_KAFKA_TESTS: "1"
      continue-on-error: ${{ matrix.can_fail }}
      timeout-minutes: 15

    - name: Run doctests
      run: |
        echo "üìö Running doctests..."
        cargo test --doc --quiet
      continue-on-error: ${{ matrix.can_fail }}
      timeout-minutes: 10

    - name: Build examples
      run: |
        cargo build --example builder_configuration
        cargo build --example consumer_with_headers
        cargo build --example fluent_api_example
        cargo build --example headers_example
        cargo build --example message_metadata_example
        cargo build --example typed_kafka_example
      continue-on-error: ${{ matrix.can_fail }}

  comprehensive-tests:
    name: Comprehensive Tests
    runs-on: ubuntu-latest
    needs: test  # Only run if fast tests pass
    # Only run comprehensive tests on master branch or for PRs to master
    if: github.ref == 'refs/heads/master' || github.base_ref == 'master' || contains(github.event.pull_request.labels.*.name, 'comprehensive-tests')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust Environment
      uses: ./.github/actions/setup-rust
      with:
        rust-version: stable
        components: rustfmt,clippy
        cache-suffix: comprehensive

    - name: Run comprehensive failure scenario tests
      run: |
        echo "üß™ Running comprehensive failure scenario tests..."
        echo "‚è±Ô∏è  These tests take 40+ seconds each and validate production-ready failure handling"
        cargo test --features comprehensive-tests --verbose -- comprehensive
      env:
        SKIP_KAFKA_TESTS: "1"
      timeout-minutes: 20

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust Environment
      uses: ./.github/actions/setup-rust
      with:
        rust-version: stable
        components: rustfmt,clippy,llvm-tools-preview
        cache-suffix: coverage

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Generate code coverage (fast tests only)
      run: |
        echo "üìä Generating code coverage for fast tests..."
        cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info -- --skip integration:: --skip performance:: --skip comprehensive
      env:
        SKIP_KAFKA_TESTS: "1"
      timeout-minutes: 20

    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v3
    #   with:
    #     file: lcov.info
    #     fail_ci_if_error: true

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust Environment
      uses: ./.github/actions/setup-rust
      with:
        rust-version: stable
        components: rustfmt,clippy
        cache-suffix: docs

    - name: Check documentation
      run: cargo doc --all-features --no-deps --document-private-items

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust Environment
      uses: ./.github/actions/setup-rust
      with:
        rust-version: stable
        components: rustfmt,clippy
        cache-suffix: security

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Security audit
      run: cargo audit

  minimum-supported-rust-version:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust Environment
      uses: ./.github/actions/setup-rust
      with:
        rust-version: 1.85.0
        components: rustfmt,clippy
        cache-suffix: msrv

    - name: Check MSRV compatibility
      run: cargo check --all-features